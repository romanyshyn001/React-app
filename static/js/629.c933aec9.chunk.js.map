{"version":3,"file":"static/js/629.c933aec9.chunk.js","mappings":"wKACA,GAAgB,KAAO,sBAAsB,UAAY,2BAA2B,OAAS,wBAAwB,SAAW,0BAA0B,WAAa,6B,4ECGjKA,EAAW,SAACC,GACd,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OAEI,iBAAKC,UAAWC,EAAAA,KAAhB,WACI,gBAAKD,UAAWC,EAAAA,OAAUC,IAAKC,EAAYC,IAAI,YAC/C,SAAC,KAAD,CAASC,GAAIP,EAAb,SAAoBD,EAAMS,SAGrC,ECLD,EANgB,SAACT,GACb,OACI,gBAAKG,UAAWC,EAAAA,SAAhB,SAA6BJ,EAAMU,SAE1C,E,mBCFYC,EAAiB,SAACX,GAE/B,IAAMY,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbC,cAAe,IAEjBC,iBAAkBC,EAAAA,GAAW,CAC3BF,cAAeE,EAAAA,KACdC,IAAI,GAAI,yBACRC,IAAI,EAAG,wBACPC,SAAS,cAEZC,SAAU,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UACnBvB,EAAMwB,iBAAiBF,GACvBC,EAAU,GACT,IAIH,OACE,kBAAMF,SAAUT,EAAOa,aAAvB,WACE,qBAAUtB,UAAWC,EAAAA,UACfF,GAAG,gBACHO,KAAK,gBACLiB,KAAK,OACLC,MAAQf,EAAOU,OAAOP,cACtBa,SAAWhB,EAAOiB,eAEtBjB,EAAOkB,QAAQf,eAAiBH,EAAOmB,OAAOhB,eAC7C,gBAAKZ,UAAWC,EAAAA,WAAhB,SAAgCQ,EAAOmB,OAAOhB,gBAC/C,MAEF,mBAAQW,KAAK,SAAb,sBAGL,ECHD,EA/BgB,SAAC1B,GAEjB,IAAIgC,EAAQhC,EAAMiC,WACdC,EAAeF,EAAMG,YAAYC,KAAI,SAAAC,GAAM,OAAI,SAACtC,EAAD,CAAUU,KAAM4B,EAAO5B,MAAW4B,EAAOnC,GAA7C,IAC3CoC,EAAgBN,EAAMO,YAAYH,KAAI,SAAAI,GAAW,OAAI,SAAC,EAAD,CAAS9B,QAAS8B,EAAY9B,SAAc8B,EAAYtC,GAA5D,IAWjD,OACI,iBAAKC,UAAWC,EAAAA,KAAhB,WACA,gBAAKD,UAAWC,EAAAA,UAAhB,SACU8B,KAEN,iBAAK/B,UAAWC,EAAAA,SAAhB,UACMkC,GACF,4BACI,SAAC3B,EAAD,CAAgBa,iBAZb,SAACiB,GACpBzC,EAAM0C,qBAAqBD,EAAE1B,cAChC,WAeA,E,mBCJD,GAAe4B,E,QAAAA,KACXC,EAAAA,EAAAA,KAxBkB,SAACZ,GACnB,MAAO,CACHC,WAAYD,EAAMC,WAClBY,WAAYb,EAAMC,WAAWa,cAEpC,IAEwB,SAACC,GACtB,MAAO,CAIHL,qBAAsB,SAACM,GACnBD,GAASE,EAAAA,EAAAA,GAAwBD,GACpC,EAER,IASGE,EAAAA,EAFJ,CAGEC,E","sources":["webpack://my-app/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/FormMessage.jsx","components/Dialogs/Dialog.jsx","components/Dialogs/dialogContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"chat\":\"Dialogs_chat__KjHlB\",\"chatItems\":\"Dialogs_chatItems__j16Rf\",\"images\":\"Dialogs_images__FX8D9\",\"messages\":\"Dialogs_messages__KT0Cq\",\"dialogPost\":\"Dialogs_dialogPost__8Hlqi\"};","import { NavLink } from 'react-router-dom';\r\nimport s from './../Dialogs.module.css'\r\nimport avaMessage from './avaMessage.png'\r\nimport React from 'react';\r\nconst ChatItem = (props) => {\r\n    let path = '/dialogs/' + props.id\r\n\r\n    return (\r\n        \r\n        <div className={s.item}>\r\n            <img className={s.images} src={avaMessage} alt='avatar'></img> \r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport {ChatItem};","import s from './../Dialogs.module.css'\r\nimport React from 'react';\r\n//Шаблоне повідомленн\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={s.messages}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from \"react\"\r\nimport { useFormik } from \"formik\";\r\nimport * as Yup from 'yup'\r\nimport s from './Dialogs.module.css';\r\n\r\nexport const AddMessageForm = (props) => {\r\n\r\nconst formik = useFormik({\r\n  initialValues: {\r\n    addDialogPost: ''\r\n  },\r\n  validationSchema: Yup.object({\r\n    addDialogPost: Yup.string()\r\n    .max(20, 'Maximum 20 characters')\r\n    .min(2, 'Minimun characters 2')\r\n    .required('Required'),\r\n  }),\r\n  onSubmit: (values, { resetForm }) => {\r\n    props.updateDialogText(values)\r\n    resetForm('')\r\n    }\r\n  }\r\n)\r\n\r\n  return (\r\n    <form onSubmit={formik.handleSubmit}>\r\n      <textarea className={s.inputText} \r\n            id='addDialogPost'\r\n            name='addDialogPost'\r\n            type='text'\r\n            value={ formik.values.addDialogPost }\r\n            onChange={ formik.handleChange } \r\n      />\r\n      { formik.touched.addDialogPost && formik.errors.addDialogPost\r\n      ? (<div className={s.dialogPost}>{ formik.errors.addDialogPost}</div>)\r\n      : null\r\n      }\r\n      <button type=\"submit\" > Send </button>\r\n    </form>\r\n  )\r\n}","import s from './Dialogs.module.css';\r\nimport React from 'react';\r\nimport { ChatItem } from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\nimport { AddMessageForm } from './FormMessage';\r\n\r\nconst Dialogs = (props) => {\r\n\r\nlet state = props.dialogPage\r\nlet dialogsElems = state.dialogsData.map(dialog => <ChatItem name={dialog.name} key={dialog.id} />)\r\nlet messagesElems = state.messageData.map(messageItem => <Message message={messageItem.message} key={messageItem.id}/>)\r\n\r\n// let sendMessageClick = () => {\r\n//     props.sendMessageByClick()\r\n//     console.log('You submit the form')\r\n// }\r\n\r\nlet updateDialogText = (e) => {  \r\n    props.updateDialogTextBody(e.addDialogPost)\r\n}\r\n\r\n    return (    \r\n        <div className={s.chat}>\r\n        <div className={s.chatItems}>\r\n                { dialogsElems }\r\n        </div>      \r\n            <div className={s.messages}>\r\n                { messagesElems }\r\n                <label>\r\n                    <AddMessageForm updateDialogText={updateDialogText}/>\r\n                </label>\r\n            </div>  \r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport { addDialogTextCreator, updateDialogTextCreator } from '../../redux/dialogReducer';\r\nimport Dialogs from './Dialog';\r\nimport { connect } from 'react-redux';\r\nimport { withAuthNavigate } from './../HOC/withAuthRedirect'\r\nimport { compose } from 'redux'\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogPage: state.dialogPage,\r\n        dialogText: state.dialogPage.newDialogPost,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {        \r\n        // sendMessageByClick: () => {\r\n        //     dispatch(addDialogTextCreator())\r\n        // },\r\n        updateDialogTextBody: (body) => {\r\n            dispatch(updateDialogTextCreator(body))\r\n        }\r\n    }\r\n}\r\n\r\n// let AuthNavigateComponent = withAuthNavigate(Dialogs) \r\n\r\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthNavigateComponent)\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthNavigate\r\n)(Dialogs)\r\n\r\n\r\n\r\n\r\n// const DialogsContainer = () => {\r\n//         return  <StoreContext.Consumer>    \r\n//             { (store) => {\r\n\r\n//         let state = store.getState().dialogPage;\r\n\r\n//         let onSendMessageClick = () => {\r\n//             store.dispatch(addDialogTextCreator())\r\n//         }\r\n\r\n//         let onUpdateDialogText = (body) => {\r\n//             store.dispatch(updateDialogTextCreator(body))\r\n//         }\r\n//             return    <Dialogs sendMessageByClick={onSendMessageClick} \r\n//                                updateDialogTextBody={onUpdateDialogText}\r\n//                                dialogPage={state}/>\r\n//             }}\r\n//             </StoreContext.Consumer>\r\n            \r\n// }"],"names":["ChatItem","props","path","id","className","s","src","avaMessage","alt","to","name","message","AddMessageForm","formik","useFormik","initialValues","addDialogPost","validationSchema","Yup","max","min","required","onSubmit","values","resetForm","updateDialogText","handleSubmit","type","value","onChange","handleChange","touched","errors","state","dialogPage","dialogsElems","dialogsData","map","dialog","messagesElems","messageData","messageItem","e","updateDialogTextBody","compose","connect","dialogText","newDialogPost","dispatch","body","updateDialogTextCreator","withAuthNavigate","Dialogs"],"sourceRoot":""}